@inject PubHub.Common.Services.IBookService BookService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService

<div class="modal fade show" id="removeBookModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">You're about to remove: <b>@BookTitle</b></h4>
                <button type="button" class="btn close" @onclick="() => ModalOptions(false)">x</button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-2">
                    <label for="removeBookTitleInput" class="form-label">Are you sure you wish to delete this book: <b>@BookTitle</b></label>
                </div>
            </div>
            <div class="modal-footer">
                <PollyInfo />
                <div>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveBook()">Remove</button>
                    <button type="button" class="btn btn-success" @onclick="() => ModalOptions(false)">Cancel</button>
                    @if (unsuccessfulResult)
                    {
                        <label class="text-danger">Unable to remove the book.</label>
                    }
                </div>                
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public Guid BookId { get; set; }

    [Parameter]
    public required string BookTitle { get; set; }

    private bool unsuccessfulResult = false;

    private async Task RemoveBook()
    {
        var result = await BookService.DeleteBookAsync(BookId);
        if (result.StatusCode == HttpStatusCode.NotFound)
        {
            NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Success, Summary = NotFoundError.ERROR_MESSAGE, Detail = NotFoundError.TITLE, Duration = 5000 });
            unsuccessfulResult = true;
            StateHasChanged();
        }
        else if (result.StatusCode == HttpStatusCode.InternalServerError)
        {
            NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Success, Summary = NoConnectionError.ERROR_MESSAGE, Detail = NoConnectionError.TITLE, Duration = 5000 });
            unsuccessfulResult = true;
            StateHasChanged();
        }
        else
        {
            NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Success, Summary = $"Successfully removed the book: {BookTitle}.", Detail = "Success", Duration = 5000 });
            await ModalOptions(false);
        }
    }

    Task ModalOptions(bool IsClosing)
    {
        return OnClose.InvokeAsync(IsClosing);
    }
}
