@inject PubHub.Common.Services.IPublisherService PublisherService
@inject Radzen.NotificationService NotificationService
@attribute [Authorize(Policy = "Operator")]

<div class="modal fade show" id="createPublisherModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Create a new book</h4>
                <button type="button" class="btn close" @onclick="() => ModalOptions(false)">x</button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-2">
                    <label for="createPublisherName" class="form-label"><b>Publisher name:</b></label>
                    <input @bind="name" type="text" id="createPublisherName" class="form-control" placeholder="Type in the publisher name..." />
                </div>
                <div class="form-group mb-2">
                    <label for="createPublisherEmail" class="form-label"><b>Publisher email:</b></label>
                    <input @bind="email" type="email" id="createPublisherEmail" class="form-control" placeholder="Type in the publisher email..." />
                </div>
                <div class="form-group mb-2">
                    <label for="createPublisherPassword" class="form-label"><b>Publisher password:</b></label>
                    <input @bind="password" type="password" id="createPublisherPassword" class="form-control" placeholder="Type in the publisher password..." />
                </div>
                <div class="form-group mb-2">
                    <label for="createPublisherPassword" class="form-label"><b>Confirm password:</b></label>
                    <input @bind="confirmPassword" type="password" id="createPublisherPassword" class="form-control" placeholder="Type in the publisher password again..." />
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success" @onclick="() => CreatePublisher()">Create</button>
                    <button type="button" class="btn btn-danger" @onclick="() => ModalOptions(false)">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    string name = string.Empty;
    string email = string.Empty;
    string password = string.Empty;
    string confirmPassword = string.Empty;

    // TODO (JBN): Add and test actual functionality, as well as the account creation.
    private async Task CreatePublisher()
    {
        string savedPassword = string.Equals(password, confirmPassword) ? password : string.Empty;

        if (savedPassword != null)
        {
            AccountForm accountForm = new()
            {
                Email = email,
                Password = savedPassword
            };

            PublisherForm publisherForm = new()
            {
                Name = name,
                Account = accountForm.CreateAccountModel()
            };

            if (publisherForm != null)
            {
                var result = await PublisherService.AddPublisherAsync(publisherForm.CreatePublisherModel());
                if (result.StatusCode == ResponseCodeConstants.CREATED_CODE)
                {
                    NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Success, Summary = result.ErrorDescriptor, Detail = "Success", Duration = 5000 });
                    await ModalOptions(false);
                }
                else
                {
                    NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Error, Summary = result.ErrorDescriptor, Detail = "Error", Duration = 5000 });
                }
            }
        }
    }

    Task ModalOptions(bool IsClosing)
    {
        return OnClose.InvokeAsync(IsClosing);
    }
}
