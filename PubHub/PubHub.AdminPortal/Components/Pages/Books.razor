@page "/Books"
@inherits ComponentBase
@inject PubHub.Common.Services.IPublisherService PublisherService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService

<PageTitle>Publisher's books</PageTitle>

@if (Publisher != null)
{
    <div class="container">
        <div class="row">
            <div class="col-md-10">
                <h1 class="text-center">@Publisher.Name books</h1>
            </div>
            <div class="col-md-2">
                <button class="btn btn-success" @onclick="() => showCreateModal = true">+ Add book</button>
            </div>
            @if (showCreateModal)
            {
                <CreateBookModal OnClose="() => OnCreateDialogClose()" Publisher="Publisher"></CreateBookModal>
            }
            @if (showRemoveModal)
            {
                <RemoveBookModal OnClose="() => OnRemoveDialogClose()" BookId="@bookInfoModel.Id" BookTitle="@bookInfoModel.Title"></RemoveBookModal>
            }
        </div>
        <div class="row text-center">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Publication year</th>
                        <th scope="col">Administration</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var bookInfo in BookInfos)
                    {
                        <tr>
                            <td>@bookInfo.Title</td>
                            <td>@bookInfo.PublicationDate</td>
                            <td>
                                <div class="combined-item">
                                    <button class="btn btn-secondary me-2" disabled @onclick="() => OpenUpdateModal(bookInfo)">Update</button>
                                    <button class="btn btn-danger" @onclick="() => OpenRemoveModal(bookInfo)">Remove</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    bool showCreateModal;
    bool showUpdateModal;
    bool showRemoveModal;
    public EventCallback<bool> OnClose { get; set; }

    public List<BookInfoModel>? BookInfos { get; set; } = new();
    private PublisherInfoModel? Publisher { get; set; }

    private BookInfoModel bookInfoModel;

    protected async override Task OnInitializedAsync()
    {
        Publisher = await PublisherService.GetPublisherInfo(TestData.PUBLISHER_ID);
        if (Publisher != null)
        {
            BookInfos = await PublisherService.GetPublisherBooks(Publisher.Id);
        }
    }

    // This method is currently disabled until we figured out what to do with the Book content.
    public async Task OpenUpdateModal(BookInfoModel bookInfo)
    {
        await DialogService.OpenAsync<UpdateBookModal>(string.Empty,
               new Dictionary<string, object>() { { "BookInfoModel", bookInfo }, { "OnClose", () => OnRemoveDialogClose() } },
               new Radzen.DialogOptions() { Width = "0", Height = "0" });
    }

    public void OpenRemoveModal(BookInfoModel bookInfo)
    {
        bookInfoModel = bookInfo;
        showRemoveModal = true;
    }

    #region Dialog closing methods.
    private async Task OnCreateDialogClose()
    {
        showCreateModal = false;
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnUpdateDialogClose()
    {
        showUpdateModal = false;
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnRemoveDialogClose()
    {
        showRemoveModal = false;
        await OnInitializedAsync();
        StateHasChanged();
    }
    #endregion
}
