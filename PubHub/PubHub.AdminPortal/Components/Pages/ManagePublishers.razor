@inherits ComponentBase
@inject PubHub.Common.Services.IPublisherService PublisherService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService
@attribute [Authorize(Policy = "Operator")]

<PageTitle>Publishers</PageTitle>

<AuthorizeView Policy="Operator">
    <Authorized>
        @if (Publishers != null)
        {
            <div class="container">
                <div class="row">
                    <div class="col-md-10">
                        <h1 class="text-center">Publishers</h1>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-success" @onclick="() => showCreateModal = true">+ Add publisher</button>
                    </div>
                    @if (showCreateModal)
                    {
                        <CreatePublisherModal OnClose="() => OnCreateDialogClose()"></CreatePublisherModal>
                    }
                </div>
                <div class="row text-center">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Email</th>
                                <th scope="col">Administration</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var publisher in Publishers)
                            {
                                <tr>
                                    <td>@publisher.Name</td>
                                    <td>@publisher.Email</td>
                                    <td>
                                        <div class="combined-item">
                                            @if (!string.IsNullOrWhiteSpace(publisher.Email))
                                            {
                                                <button class="btn btn-danger" @onclick="() => OpenRemoveModal(publisher)">Remove account</button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @if (showRemoveModal && publisher != null)
                {
                    <RemovePublisherModal OnClose="() => OnRemoveDialogClose()" PublisherId="@publisher.Id" PublisherName="@publisher.Name"></RemovePublisherModal>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <h3>You do not have access to this page.</h3>
    </NotAuthorized>
</AuthorizeView>

<PollyInfo/>

@code {
    bool showCreateModal;
    bool showRemoveModal;
    public EventCallback<bool> OnClose { get; set; }

    private List<PublisherInfoModel>? Publishers { get; set; }

    private PublisherInfoModel? publisher;

    private PublisherQuery publisherQuery = new() { OrderBy = OrderPublisherBy.Name, Descending = true, Max = 10, Page = 1, SearchKey = string.Empty };

    protected async override Task OnInitializedAsync()
    {
        var resultPub = await PublisherService.GetAllPublishersAsync(publisherQuery);

        if (resultPub.StatusCode == HttpStatusCode.TooManyRequests)
            NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Error, Summary = TooManyRequestError.ERROR_MESSAGE, Duration = 5000 });

        if (resultPub != null && resultPub.Instance != null)
        {
            Publishers = resultPub.Instance.ToList();
        }
    }

    public void OpenRemoveModal(PublisherInfoModel publisherInfo)
    {
        publisher = publisherInfo;
        if (publisher != null)
        {
            showRemoveModal = true;
        }
    }

    #region Dialog closing methods.
    private async Task OnCreateDialogClose()
    {
        showCreateModal = false;
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnRemoveDialogClose()
    {
        showRemoveModal = false;
        await OnInitializedAsync();
        StateHasChanged();
    }
    #endregion
}
