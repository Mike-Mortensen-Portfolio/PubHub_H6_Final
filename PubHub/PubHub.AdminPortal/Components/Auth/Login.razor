@page "/login"
@inject PubHub.Common.Services.IAuthenticationService AuthService
@inject Radzen.NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider CustomAuthProvider
@inject IJSRuntime Js
@inject ILocalStorageService LocalStorage;

<PageTitle>Login</PageTitle>

<div class="card">
    <EditForm Model="loginInfo" OnValidSubmit="LoginAsync">
        <DataAnnotationsValidator />
        <div class="card-body">
            <h5 class="card-title">Sign in</h5>
            <div class="form-group m-2">
                <label class="form-label" for="email">Email:</label>
                <input type="email" @bind-value="loginInfo.Email" id="email" class="card-text form-control" placeholder="Enter your email address..." />
            </div>
            <div class="form-group m-2">
                <label class="form-label" for="password">Password:</label>
                <input type="password" @bind-value="loginInfo.Password" id="password" class="card-text form-control" placeholder="Enter your password..." />
            </div>
            <div class="form-group m-2">
                <button type="submit" class="btn btn-primary">Sign in</button>
            </div>
        </div>
        <ValidationSummary />
    </EditForm>
</div>


@code {
    private LoginInfo loginInfo = new();

    // TODO (JBN): Test this when everything is set up regarding authentication.
    public async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(loginInfo.Email))
            NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Error, Summary = "Email is required.", Duration = 5000 });

        if (string.IsNullOrWhiteSpace(loginInfo.Password))
            NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Error, Summary = "Password is required.", Duration = 5000 });

        if (!string.IsNullOrWhiteSpace(loginInfo.Email) && !string.IsNullOrWhiteSpace(loginInfo.Password))
        {
            var result = await AuthService.LoginAsync(loginInfo);

            if (result.Instance == null)
            {
                NotificationService.Notify(new Radzen.NotificationMessage { Severity = Radzen.NotificationSeverity.Error, Summary = "Unable to login.", Duration = 5000 });
            }
            else if (result.Instance != null)
            {
                await LocalStorage.SetItemAsync<string>("token", result.Instance.Token);

                var customAuthStateProvider = CustomAuthProvider;
                customAuthStateProvider.UpdateAuhenticationState(result.Instance.Token);

                NavigationManager.NavigateTo("/", forceLoad: true);
            }

        }
    }
}
