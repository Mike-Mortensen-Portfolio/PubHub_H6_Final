// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PubHub.API.Domain;

#nullable disable

namespace PubHub.API.Migrations
{
    [DbContext(typeof(PubHubContext))]
    [Migration("20240330101825_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AccountLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AccountTokens", (string)null);
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.AccessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccessTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3a846d8-1910-87db-8211-018e8ede1ce8"),
                            Name = "Owner"
                        },
                        new
                        {
                            Id = new Guid("f6f30f22-de53-8826-8212-018e8ede1ce8"),
                            Name = "Subscriber"
                        },
                        new
                        {
                            Id = new Guid("9e7964a5-454e-8c03-8213-018e8ede1ce8"),
                            Name = "Borrower"
                        },
                        new
                        {
                            Id = new Guid("de400bc3-448c-8dcc-8214-018e8ede1ce8"),
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("164b7367-a253-8642-8215-018e8ede1ce8"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("0301188b-b4e8-8994-8216-018e8ede1ce8"),
                            Name = "Publisher"
                        },
                        new
                        {
                            Id = new Guid("bcc27f6e-e1df-8d68-8217-018e8ede1ce8"),
                            Name = "Operator"
                        },
                        new
                        {
                            Id = new Guid("eb70cfb3-af43-8050-8218-018e8ede1ce8"),
                            Name = "Suspended"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd63af00-f993-83f8-8570-018e8ede1d91"),
                            Name = "Jhon Doe"
                        },
                        new
                        {
                            Id = new Guid("c9e6e5fd-2f07-8a15-8571-018e8ede1d91"),
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = new Guid("afbe5a10-baf7-8f84-8572-018e8ede1d91"),
                            Name = "Dan Turéll"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookId");

                    b.Property<byte[]>("BookContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d30633ce-197f-84d3-858b-018e8ede1d91"),
                            BookContent = new byte[0],
                            ContentTypeId = new Guid("fb57133f-4319-8bbb-8573-018e8ede1d91"),
                            IsHidden = false,
                            Length = 3600.0,
                            PublicationDate = new DateOnly(1955, 12, 1),
                            PublisherId = new Guid("7bf64e8c-9a22-8299-8575-018e8ede1d91"),
                            Title = "My day in the shoos of Tommy"
                        },
                        new
                        {
                            Id = new Guid("02fa7e3a-0a16-83f5-858c-018e8ede1d91"),
                            BookContent = new byte[0],
                            ContentTypeId = new Guid("484f3814-65de-8400-8574-018e8ede1d91"),
                            IsHidden = false,
                            Length = 123.0,
                            PublicationDate = new DateOnly(2023, 4, 7),
                            PublisherId = new Guid("bfbbc413-0444-8678-8576-018e8ede1d91"),
                            Title = "My horse is the wildest"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("d30633ce-197f-84d3-858b-018e8ede1d91"),
                            AuthorId = new Guid("dd63af00-f993-83f8-8570-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("02fa7e3a-0a16-83f5-858c-018e8ede1d91"),
                            AuthorId = new Guid("c9e6e5fd-2f07-8a15-8571-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("02fa7e3a-0a16-83f5-858c-018e8ede1d91"),
                            AuthorId = new Guid("afbe5a10-baf7-8f84-8572-018e8ede1d91")
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("d30633ce-197f-84d3-858b-018e8ede1d91"),
                            GenreId = new Guid("65d28176-c907-856e-8577-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("d30633ce-197f-84d3-858b-018e8ede1d91"),
                            GenreId = new Guid("95bfcbee-d141-80c3-8579-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("d30633ce-197f-84d3-858b-018e8ede1d91"),
                            GenreId = new Guid("67fef281-2514-84c5-857f-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("02fa7e3a-0a16-83f5-858c-018e8ede1d91"),
                            GenreId = new Guid("b58ad95a-4493-83c8-857b-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("02fa7e3a-0a16-83f5-858c-018e8ede1d91"),
                            GenreId = new Guid("9187b3fb-e126-865b-857e-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("02fa7e3a-0a16-83f5-858c-018e8ede1d91"),
                            GenreId = new Guid("075cc537-cb1f-80a4-8578-018e8ede1d91")
                        },
                        new
                        {
                            BookId = new Guid("02fa7e3a-0a16-83f5-858c-018e8ede1d91"),
                            GenreId = new Guid("32361c8d-0087-8b9d-857c-018e8ede1d91")
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.ContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb57133f-4319-8bbb-8573-018e8ede1d91"),
                            Name = "AudioBook"
                        },
                        new
                        {
                            Id = new Guid("484f3814-65de-8400-8574-018e8ede1d91"),
                            Name = "EBook"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GenreId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("65d28176-c907-856e-8577-018e8ede1d91"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("075cc537-cb1f-80a4-8578-018e8ede1d91"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("95bfcbee-d141-80c3-8579-018e8ede1d91"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("509cc50f-b7d3-86f8-857a-018e8ede1d91"),
                            Name = "Science-Fiction"
                        },
                        new
                        {
                            Id = new Guid("b58ad95a-4493-83c8-857b-018e8ede1d91"),
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = new Guid("32361c8d-0087-8b9d-857c-018e8ede1d91"),
                            Name = "Novel"
                        },
                        new
                        {
                            Id = new Guid("cb0be81d-0ae3-8cd5-857d-018e8ede1d91"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("9187b3fb-e126-865b-857e-018e8ede1d91"),
                            Name = "Biography"
                        },
                        new
                        {
                            Id = new Guid("67fef281-2514-84c5-857f-018e8ede1d91"),
                            Name = "True crime"
                        },
                        new
                        {
                            Id = new Guid("db4624b4-ccc9-8d05-8580-018e8ede1d91"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("46c26d0c-c613-8520-8581-018e8ede1d91"),
                            Name = "Young adult"
                        },
                        new
                        {
                            Id = new Guid("90b2e2a9-36c2-80b5-8582-018e8ede1d91"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("38c6a254-53ba-8879-8583-018e8ede1d91"),
                            Name = "Satire"
                        },
                        new
                        {
                            Id = new Guid("7a3a0202-2438-8819-8584-018e8ede1d91"),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = new Guid("448dd5dc-c054-867f-8585-018e8ede1d91"),
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = new Guid("2f5c9884-459d-8434-8586-018e8ede1d91"),
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = new Guid("23ca4076-f3f1-8082-8587-018e8ede1d91"),
                            Name = "Humor"
                        },
                        new
                        {
                            Id = new Guid("aeb5c93d-bf25-8683-8588-018e8ede1d91"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("f9b2663d-9e1c-8694-8589-018e8ede1d91"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("9fa1a85a-1b51-831d-858a-018e8ede1d91"),
                            Name = "Short story"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OperatorId");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Operators", (string)null);
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublisherId");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Publishers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bf64e8c-9a22-8299-8575-018e8ede1d91"),
                            AccountId = new Guid("f3c1eeba-3945-8222-821a-018e8ede1ce8"),
                            Name = "Gyldendal"
                        },
                        new
                        {
                            Id = new Guid("bfbbc413-0444-8678-8576-018e8ede1d91"),
                            AccountId = new Guid("3ba560f7-c7b9-8dd1-821b-018e8ede1ce8"),
                            Name = "Forlaget Als"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b6a1736-b941-8c6b-858d-018e8ede1d91"),
                            AccountId = new Guid("bb6b1344-1429-86f4-8219-018e8ede1ce8"),
                            Birthday = new DateOnly(1993, 4, 12),
                            Name = "Thomas",
                            Surname = "Berlin"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.UserBook", b =>
                {
                    b.Property<Guid>("UserBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcquireDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ProgressInProcent")
                        .HasColumnType("real");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserBookId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks", (string)null);
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSignIn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb6b1344-1429-86f4-8219-018e8ede1ce8"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("164b7367-a253-8642-8215-018e8ede1ce8"),
                            ConcurrencyStamp = "UserSeedConcurrencyStamp",
                            Email = "User@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 3, 30, 10, 18, 24, 872, DateTimeKind.Utc).AddTicks(7035),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@TEST.COM",
                            NormalizedUserName = "USER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAqnOr8BP0I2r+LvZ2Obf94k1LsgXpBe/bDJhbSy9VbEtT7DBwnGe6SGvGJPapZKpQ==",
                            PhoneNumber = "4587654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "UserSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "User@Test.com"
                        },
                        new
                        {
                            Id = new Guid("f3c1eeba-3945-8222-821a-018e8ede1ce8"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("0301188b-b4e8-8994-8216-018e8ede1ce8"),
                            ConcurrencyStamp = "PublisherSeedConcurrencyStamp",
                            Email = "Publisher@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 3, 30, 10, 18, 24, 872, DateTimeKind.Utc).AddTicks(7052),
                            LockoutEnabled = false,
                            NormalizedEmail = "PUBLISHER@TEST.COM",
                            NormalizedUserName = "PUBLISHER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEApCq/20dsXSv+d/npYSxMaTjZmOdNCt36tEOt9FTjUxhOpp0qfBQdOid77ZliRTAQ==",
                            PhoneNumber = "4576543210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PublisherSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Publisher@Test.com"
                        },
                        new
                        {
                            Id = new Guid("3ba560f7-c7b9-8dd1-821b-018e8ede1ce8"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("0301188b-b4e8-8994-8216-018e8ede1ce8"),
                            ConcurrencyStamp = "Publisher2SeedConcurrencyStamp",
                            Email = "Publisher2@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 3, 30, 10, 18, 24, 872, DateTimeKind.Utc).AddTicks(7063),
                            LockoutEnabled = false,
                            NormalizedEmail = "PUBLISHER2@TEST.COM",
                            NormalizedUserName = "PUBLISHER2@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMFkR3SjBCvVlYs4raezqupzaTetZE2QZMSCtgLI39/vHOs4doGcBEY6wlC6KIc0fg==",
                            PhoneNumber = "4565432109",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "Publisher2SeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Publisher2@Test.com"
                        },
                        new
                        {
                            Id = new Guid("a7394e42-4a1d-8cc2-821c-018e8ede1ce8"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("bcc27f6e-e1df-8d68-8217-018e8ede1ce8"),
                            ConcurrencyStamp = "OperatorSeedConcurrencyStamp",
                            Email = "Operator@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 3, 30, 10, 18, 24, 872, DateTimeKind.Utc).AddTicks(7073),
                            LockoutEnabled = false,
                            NormalizedEmail = "OPERATOR@TEST.COM",
                            NormalizedUserName = "OPERATOR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJnI1edVj9ybEAW5riZhKq1+zr2l2XzOpnE5dk72g6gPBoSMfC6qG01VTDqvK1p/jw==",
                            PhoneNumber = "4554321098",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "OperatorSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Operator@Test.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookGenre", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Operator", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.Operator", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.Publisher", "AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.UserBook", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.AccessType", "AccessType")
                        .WithMany()
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccessType");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.Navigation("UserBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
