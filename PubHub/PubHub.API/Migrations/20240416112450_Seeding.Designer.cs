// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PubHub.API.Domain;

#nullable disable

namespace PubHub.API.Migrations
{
    [DbContext(typeof(PubHubContext))]
    [Migration("20240416112450_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AccountLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AccountTokens", (string)null);
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.AccessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccessTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed9e0588-ec9d-8128-8630-018ee6a70583"),
                            Name = "Owner"
                        },
                        new
                        {
                            Id = new Guid("a2e4ee8e-f9fa-8503-8631-018ee6a70583"),
                            Name = "Subscriber"
                        },
                        new
                        {
                            Id = new Guid("19fe08ed-e16b-88e4-8632-018ee6a70583"),
                            Name = "Borrower"
                        },
                        new
                        {
                            Id = new Guid("d8684ddb-25b4-802b-8633-018ee6a70583"),
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69d8cb70-da6c-8d69-8634-018ee6a70583"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("a321a671-396d-8850-8635-018ee6a70583"),
                            Name = "Publisher"
                        },
                        new
                        {
                            Id = new Guid("898f9a3a-e0bd-85ab-8636-018ee6a70583"),
                            Name = "Operator"
                        },
                        new
                        {
                            Id = new Guid("9b7de9c4-8bb4-8893-8637-018ee6a70583"),
                            Name = "Suspended"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("967d8335-aca6-8ed7-8632-018ee6a70661"),
                            Name = "Jhon Doe"
                        },
                        new
                        {
                            Id = new Guid("c9050d9a-b650-80a0-8633-018ee6a70661"),
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = new Guid("fd94223f-4cf2-8d32-8634-018ee6a70661"),
                            Name = "Dan Turéll"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookId");

                    b.Property<string>("BookContentUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("81851b1b-bb47-8cb2-864d-018ee6a70661"),
                            BookContentUri = "Domain\\Seeding\\Files\\placeboeffekten.mp3",
                            ContentTypeId = new Guid("3acf1aa9-9c59-88f9-8635-018ee6a70661"),
                            CoverImageUri = "Domain\\Seeding\\Files\\exquisite.jpeg",
                            IsHidden = false,
                            Length = 3600.0,
                            PublicationDate = new DateOnly(2018, 7, 1),
                            PublisherId = new Guid("b6104f24-dc6c-8bf5-8637-018ee6a70661"),
                            Summary = "The exquisite creations embody our best artistic endeavors, and offer a glimpse of the greatness of the civilizations that produced them. Their sheer beauty and charm are enough for us to marvel at, let alone the large sum of resources, efforts and time poured into making them. In this book, we hope to follow our predecessors' footprints in the endless pursuit of exquisite beauty, and to explore the possibilities of how this style might blaze new trails in today's graphic design world.",
                            Title = "Exquisite"
                        },
                        new
                        {
                            Id = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            BookContentUri = "Domain\\Seeding\\Files\\skyggespil.epub",
                            ContentTypeId = new Guid("6784f6c1-53c3-8ccb-8636-018ee6a70661"),
                            CoverImageUri = "Domain\\Seeding\\Files\\horse.jpg",
                            IsHidden = false,
                            Length = 123.0,
                            PublicationDate = new DateOnly(2023, 4, 7),
                            PublisherId = new Guid("1e472e88-5472-8424-8638-018ee6a70661"),
                            Summary = "Kentucky, 1850. An enslaved groom named Jarret and a bay foal forge a bond of understanding that will carry the horse to record-setting victories across the South. When the nation erupts in civil war, an itinerant young artist who has made his name on paintings of the racehorse takes up arms for the Union.",
                            Title = "Horse"
                        },
                        new
                        {
                            Id = new Guid("7b235615-7afb-8f17-864f-018ee6a70661"),
                            BookContentUri = "Domain\\Seeding\\Files\\placeboeffekten.mp3",
                            ContentTypeId = new Guid("3acf1aa9-9c59-88f9-8635-018ee6a70661"),
                            CoverImageUri = "Domain\\Seeding\\Files\\horse.jpg",
                            IsHidden = false,
                            Length = 123.0,
                            PublicationDate = new DateOnly(2023, 4, 7),
                            PublisherId = new Guid("1e472e88-5472-8424-8638-018ee6a70661"),
                            Summary = "Kentucky, 1850. An enslaved groom named Jarret and a bay foal forge a bond of understanding that will carry the horse to record-setting victories across the South. When the nation erupts in civil war, an itinerant young artist who has made his name on paintings of the racehorse takes up arms for the Union.",
                            Title = "Horse"
                        },
                        new
                        {
                            Id = new Guid("e0ecbef2-ff07-867e-8650-018ee6a70661"),
                            BookContentUri = "Domain\\Seeding\\Files\\skyggespil.epub",
                            ContentTypeId = new Guid("6784f6c1-53c3-8ccb-8636-018ee6a70661"),
                            CoverImageUri = "Domain\\Seeding\\Files\\skyggespil.png",
                            IsHidden = false,
                            Length = 344.0,
                            PublicationDate = new DateOnly(2021, 9, 28),
                            PublisherId = new Guid("b6104f24-dc6c-8bf5-8637-018ee6a70661"),
                            Summary = "I 1600-tallets Aalborg straffes trolddom med døden, og før 14-årige Gry ved af det, sender en hekseanklage hende på bålet.\r\nMen de glubske flammer brænder hende ikke som de burde. \r\nSyttenårige Akela har accepteret dronning Soras tilbud om en plads ved hoffet.\r\nHer skal hun gennemføre skyggespillet; en række magiske dueller der afgør de Udvalgtes fremtid.\r\nKun ved at udmærke sig og opnå en plads som dronningens rådgiver kan Akela beskytte sin søster og forhindre at krigen rammer deres by. Desværre er der seks Udvalgte og blot én plads i hofrådet.\r\nMens oprørerne angriber, og bedrageriske skygger dukker op uden for skyggespillet, optrevler Akela den royale slægts hemmeligheder. Men hvem tør hun stole på når alle bekriger hinanden i dronningens spil?",
                            Title = "Shadow game"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("81851b1b-bb47-8cb2-864d-018ee6a70661"),
                            AuthorId = new Guid("967d8335-aca6-8ed7-8632-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            AuthorId = new Guid("c9050d9a-b650-80a0-8633-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            AuthorId = new Guid("fd94223f-4cf2-8d32-8634-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("7b235615-7afb-8f17-864f-018ee6a70661"),
                            AuthorId = new Guid("c9050d9a-b650-80a0-8633-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("7b235615-7afb-8f17-864f-018ee6a70661"),
                            AuthorId = new Guid("fd94223f-4cf2-8d32-8634-018ee6a70661")
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("81851b1b-bb47-8cb2-864d-018ee6a70661"),
                            GenreId = new Guid("749e96f4-6b3d-88fd-8639-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("81851b1b-bb47-8cb2-864d-018ee6a70661"),
                            GenreId = new Guid("5c82852d-69f6-8c86-863b-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("81851b1b-bb47-8cb2-864d-018ee6a70661"),
                            GenreId = new Guid("ec723f94-ebc7-8cdb-8641-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            GenreId = new Guid("603dabab-ddf7-8c54-863d-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            GenreId = new Guid("7605691d-f950-8810-8640-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            GenreId = new Guid("50ce0144-2508-8a0b-863a-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            GenreId = new Guid("d136e723-8382-8021-863e-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("7b235615-7afb-8f17-864f-018ee6a70661"),
                            GenreId = new Guid("603dabab-ddf7-8c54-863d-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("7b235615-7afb-8f17-864f-018ee6a70661"),
                            GenreId = new Guid("7605691d-f950-8810-8640-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("7b235615-7afb-8f17-864f-018ee6a70661"),
                            GenreId = new Guid("50ce0144-2508-8a0b-863a-018ee6a70661")
                        },
                        new
                        {
                            BookId = new Guid("7b235615-7afb-8f17-864f-018ee6a70661"),
                            GenreId = new Guid("d136e723-8382-8021-863e-018ee6a70661")
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.ContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3acf1aa9-9c59-88f9-8635-018ee6a70661"),
                            Name = "AudioBook"
                        },
                        new
                        {
                            Id = new Guid("6784f6c1-53c3-8ccb-8636-018ee6a70661"),
                            Name = "EBook"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GenreId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("749e96f4-6b3d-88fd-8639-018ee6a70661"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("50ce0144-2508-8a0b-863a-018ee6a70661"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("5c82852d-69f6-8c86-863b-018ee6a70661"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("a726940e-398d-82cb-863c-018ee6a70661"),
                            Name = "Science-Fiction"
                        },
                        new
                        {
                            Id = new Guid("603dabab-ddf7-8c54-863d-018ee6a70661"),
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = new Guid("d136e723-8382-8021-863e-018ee6a70661"),
                            Name = "Novel"
                        },
                        new
                        {
                            Id = new Guid("1911490d-6992-884b-863f-018ee6a70661"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("7605691d-f950-8810-8640-018ee6a70661"),
                            Name = "Biography"
                        },
                        new
                        {
                            Id = new Guid("ec723f94-ebc7-8cdb-8641-018ee6a70661"),
                            Name = "True crime"
                        },
                        new
                        {
                            Id = new Guid("0e495e0f-3540-80a5-8642-018ee6a70661"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("c0d0a84f-ac3e-862d-8643-018ee6a70661"),
                            Name = "Young adult"
                        },
                        new
                        {
                            Id = new Guid("ccb45f43-ab7e-8e3e-8644-018ee6a70661"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("8e774635-8f1b-882b-8645-018ee6a70661"),
                            Name = "Satire"
                        },
                        new
                        {
                            Id = new Guid("1b5281d7-9a59-86ae-8646-018ee6a70661"),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = new Guid("89e42f8e-3e8a-8003-8647-018ee6a70661"),
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = new Guid("986a330a-e655-8719-8648-018ee6a70661"),
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = new Guid("529f0143-3da5-83be-8649-018ee6a70661"),
                            Name = "Humor"
                        },
                        new
                        {
                            Id = new Guid("a79394b0-5e75-8dea-864a-018ee6a70661"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("6a9135be-d397-8a7a-864b-018ee6a70661"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("5f11dac9-1096-846f-864c-018ee6a70661"),
                            Name = "Short story"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OperatorId");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Operators", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3208b196-86e2-8bfb-8651-018ee6a70661"),
                            AccountId = new Guid("c3eb20d0-0611-8a21-863b-018ee6a70583"),
                            Name = "Selena",
                            Surname = "Gomez"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublisherId");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Publishers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6104f24-dc6c-8bf5-8637-018ee6a70661"),
                            AccountId = new Guid("4abd85b6-ace5-8e0c-8639-018ee6a70583"),
                            Name = "Gyldendal"
                        },
                        new
                        {
                            Id = new Guid("1e472e88-5472-8424-8638-018ee6a70661"),
                            AccountId = new Guid("3953e976-a0af-81ae-863a-018ee6a70583"),
                            Name = "Forlaget Als"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("858e5f39-fee7-8cfb-8652-018ee6a70661"),
                            AccountId = new Guid("c93c0065-b9be-8b6d-8638-018ee6a70583"),
                            Birthday = new DateOnly(1993, 4, 12),
                            Name = "Thomas",
                            Surname = "Berlin"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.UserBook", b =>
                {
                    b.Property<Guid>("UserBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcquireDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ProgressInProcent")
                        .HasColumnType("real");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserBookId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks", (string)null);

                    b.HasData(
                        new
                        {
                            UserBookId = new Guid("86228abd-f2ac-8c3a-8653-018ee6a70661"),
                            AccessTypeId = new Guid("ed9e0588-ec9d-8128-8630-018ee6a70583"),
                            AcquireDate = new DateTime(2024, 4, 16, 11, 24, 49, 633, DateTimeKind.Utc).AddTicks(5180),
                            BookId = new Guid("81851b1b-bb47-8cb2-864d-018ee6a70661"),
                            ProgressInProcent = 45.34f,
                            UserId = new Guid("858e5f39-fee7-8cfb-8652-018ee6a70661")
                        },
                        new
                        {
                            UserBookId = new Guid("0aaea5fa-5533-8d4b-8654-018ee6a70661"),
                            AccessTypeId = new Guid("ed9e0588-ec9d-8128-8630-018ee6a70583"),
                            AcquireDate = new DateTime(2024, 4, 16, 11, 24, 49, 633, DateTimeKind.Utc).AddTicks(5200),
                            BookId = new Guid("75d579a7-217e-8b28-864e-018ee6a70661"),
                            ProgressInProcent = 0f,
                            UserId = new Guid("858e5f39-fee7-8cfb-8652-018ee6a70661")
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSignIn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c93c0065-b9be-8b6d-8638-018ee6a70583"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("69d8cb70-da6c-8d69-8634-018ee6a70583"),
                            ConcurrencyStamp = "UserSeedConcurrencyStamp",
                            Email = "User@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 16, 11, 24, 49, 411, DateTimeKind.Utc).AddTicks(3786),
                            LockoutEnabled = true,
                            NormalizedEmail = "USER@TEST.COM",
                            NormalizedUserName = "USER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF4ijOoxqmvHcPSApOJZXPWRRQIaIf2+cOIxfDc8c2jKpDSCbJ5FJ/ffMcwReygRQA==",
                            PhoneNumber = "4587654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "UserSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "User@Test.com"
                        },
                        new
                        {
                            Id = new Guid("4abd85b6-ace5-8e0c-8639-018ee6a70583"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("a321a671-396d-8850-8635-018ee6a70583"),
                            ConcurrencyStamp = "PublisherSeedConcurrencyStamp",
                            Email = "Publisher@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 16, 11, 24, 49, 411, DateTimeKind.Utc).AddTicks(3811),
                            LockoutEnabled = true,
                            NormalizedEmail = "PUBLISHER@TEST.COM",
                            NormalizedUserName = "PUBLISHER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENfIJ9poQz89UGOOtxEPaZd0CstDxMW2wsVMVoUxEFUrU6waMOQ/+SAOc6FUJV5x7A==",
                            PhoneNumber = "4576543210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PublisherSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Publisher@Test.com"
                        },
                        new
                        {
                            Id = new Guid("3953e976-a0af-81ae-863a-018ee6a70583"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("a321a671-396d-8850-8635-018ee6a70583"),
                            ConcurrencyStamp = "Publisher2SeedConcurrencyStamp",
                            Email = "Publisher2@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 16, 11, 24, 49, 411, DateTimeKind.Utc).AddTicks(3826),
                            LockoutEnabled = true,
                            NormalizedEmail = "PUBLISHER2@TEST.COM",
                            NormalizedUserName = "PUBLISHER2@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBZyFaUk1E9BUO9cZwccloPsxq5nQoizg2PH0sZM8M0SxjQaUDg+MLhaJLp6c4+KKQ==",
                            PhoneNumber = "4565432109",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "Publisher2SeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Publisher2@Test.com"
                        },
                        new
                        {
                            Id = new Guid("c3eb20d0-0611-8a21-863b-018ee6a70583"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("898f9a3a-e0bd-85ab-8636-018ee6a70583"),
                            ConcurrencyStamp = "OperatorSeedConcurrencyStamp",
                            Email = "Operator@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 16, 11, 24, 49, 411, DateTimeKind.Utc).AddTicks(3840),
                            LockoutEnabled = true,
                            NormalizedEmail = "OPERATOR@TEST.COM",
                            NormalizedUserName = "OPERATOR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMqM+XlmsM3mBxFGvoIVezJ7P7XXVJozqgLN9SMOnGCGk6L3PkgFVjNBxAgp+5RLMw==",
                            PhoneNumber = "4554321098",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "OperatorSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Operator@Test.com"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.AccountRefreshToken", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId", "Value");

                    b.ToTable("AccountRefreshTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookGenre", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Operator", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.Operator", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.Publisher", "AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.UserBook", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.AccessType", "AccessType")
                        .WithMany()
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccessType");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.AccountRefreshToken", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithMany("AccountRefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.Navigation("AccountRefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
