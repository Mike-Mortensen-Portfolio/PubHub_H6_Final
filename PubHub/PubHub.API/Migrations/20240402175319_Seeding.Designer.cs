// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PubHub.API.Domain;

#nullable disable

namespace PubHub.API.Migrations
{
    [DbContext(typeof(PubHubContext))]
    [Migration("20240402175319_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AccountLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AccountTokens", (string)null);
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.AccessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccessTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d41ee5cc-b8b0-8ce2-84fd-018e9ff1ac7c"),
                            Name = "Owner"
                        },
                        new
                        {
                            Id = new Guid("6dff0958-8df7-8300-84fe-018e9ff1ac7c"),
                            Name = "Subscriber"
                        },
                        new
                        {
                            Id = new Guid("f5aac44e-13cd-871b-84ff-018e9ff1ac7c"),
                            Name = "Borrower"
                        },
                        new
                        {
                            Id = new Guid("782dfc41-1f08-8f10-8500-018e9ff1ac7c"),
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("57642934-1ddc-8bdf-8501-018e9ff1ac7c"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("7eac98d8-581b-8c57-8502-018e9ff1ac7c"),
                            Name = "Publisher"
                        },
                        new
                        {
                            Id = new Guid("c2cd6e19-e622-87e8-8503-018e9ff1ac7c"),
                            Name = "Operator"
                        },
                        new
                        {
                            Id = new Guid("724ce772-b3fb-857a-8504-018e9ff1ac7c"),
                            Name = "Suspended"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe878307-34f9-889f-8076-018e9ff1ad21"),
                            Name = "Jhon Doe"
                        },
                        new
                        {
                            Id = new Guid("d538b4fe-88d3-8bbd-8077-018e9ff1ad21"),
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = new Guid("079b7377-5d38-8608-8078-018e9ff1ad21"),
                            Name = "Dan Turéll"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookId");

                    b.Property<byte[]>("BookContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e9ce66c-cea1-80ee-8091-018e9ff1ad21"),
                            BookContent = new byte[0],
                            ContentTypeId = new Guid("f5242130-041a-841c-8079-018e9ff1ad21"),
                            IsHidden = false,
                            Length = 3600.0,
                            PublicationDate = new DateOnly(1955, 12, 1),
                            PublisherId = new Guid("f61cd634-0e73-8c8e-807b-018e9ff1ad21"),
                            Title = "My day in the shoos of Tommy"
                        },
                        new
                        {
                            Id = new Guid("8263152a-2732-89b2-8092-018e9ff1ad21"),
                            BookContent = new byte[0],
                            ContentTypeId = new Guid("e120b26c-3e66-8fdc-807a-018e9ff1ad21"),
                            IsHidden = false,
                            Length = 123.0,
                            PublicationDate = new DateOnly(2023, 4, 7),
                            PublisherId = new Guid("359b1d72-4725-8314-807c-018e9ff1ad21"),
                            Title = "My horse is the wildest"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("9e9ce66c-cea1-80ee-8091-018e9ff1ad21"),
                            AuthorId = new Guid("fe878307-34f9-889f-8076-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("8263152a-2732-89b2-8092-018e9ff1ad21"),
                            AuthorId = new Guid("d538b4fe-88d3-8bbd-8077-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("8263152a-2732-89b2-8092-018e9ff1ad21"),
                            AuthorId = new Guid("079b7377-5d38-8608-8078-018e9ff1ad21")
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("9e9ce66c-cea1-80ee-8091-018e9ff1ad21"),
                            GenreId = new Guid("3dfc3cc3-d389-87e3-807d-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("9e9ce66c-cea1-80ee-8091-018e9ff1ad21"),
                            GenreId = new Guid("bbabc883-e7cf-8ef1-807f-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("9e9ce66c-cea1-80ee-8091-018e9ff1ad21"),
                            GenreId = new Guid("27a3f8e9-a3ab-80eb-8085-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("8263152a-2732-89b2-8092-018e9ff1ad21"),
                            GenreId = new Guid("1604e64d-1563-896b-8081-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("8263152a-2732-89b2-8092-018e9ff1ad21"),
                            GenreId = new Guid("71d570e1-1446-84cc-8084-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("8263152a-2732-89b2-8092-018e9ff1ad21"),
                            GenreId = new Guid("f02768e2-9ae4-85e2-807e-018e9ff1ad21")
                        },
                        new
                        {
                            BookId = new Guid("8263152a-2732-89b2-8092-018e9ff1ad21"),
                            GenreId = new Guid("6458feef-63ec-8931-8082-018e9ff1ad21")
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.ContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ContentTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ContentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5242130-041a-841c-8079-018e9ff1ad21"),
                            Name = "AudioBook"
                        },
                        new
                        {
                            Id = new Guid("e120b26c-3e66-8fdc-807a-018e9ff1ad21"),
                            Name = "EBook"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GenreId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3dfc3cc3-d389-87e3-807d-018e9ff1ad21"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("f02768e2-9ae4-85e2-807e-018e9ff1ad21"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("bbabc883-e7cf-8ef1-807f-018e9ff1ad21"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("60005d07-dcc6-80b5-8080-018e9ff1ad21"),
                            Name = "Science-Fiction"
                        },
                        new
                        {
                            Id = new Guid("1604e64d-1563-896b-8081-018e9ff1ad21"),
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = new Guid("6458feef-63ec-8931-8082-018e9ff1ad21"),
                            Name = "Novel"
                        },
                        new
                        {
                            Id = new Guid("e986e1e3-884e-86f7-8083-018e9ff1ad21"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("71d570e1-1446-84cc-8084-018e9ff1ad21"),
                            Name = "Biography"
                        },
                        new
                        {
                            Id = new Guid("27a3f8e9-a3ab-80eb-8085-018e9ff1ad21"),
                            Name = "True crime"
                        },
                        new
                        {
                            Id = new Guid("a0d31d81-1e13-8a93-8086-018e9ff1ad21"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("708d7d44-7a12-82f0-8087-018e9ff1ad21"),
                            Name = "Young adult"
                        },
                        new
                        {
                            Id = new Guid("494bd699-da35-8a56-8088-018e9ff1ad21"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("17b7772f-92ed-886a-8089-018e9ff1ad21"),
                            Name = "Satire"
                        },
                        new
                        {
                            Id = new Guid("9586bd66-4955-8f62-808a-018e9ff1ad21"),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = new Guid("74dfcaaf-db0b-8d06-808b-018e9ff1ad21"),
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = new Guid("726e9c3f-24e1-811e-808c-018e9ff1ad21"),
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = new Guid("fd5f2dd9-0462-8ea5-808d-018e9ff1ad21"),
                            Name = "Humor"
                        },
                        new
                        {
                            Id = new Guid("d8e22e20-8b18-8bba-808e-018e9ff1ad21"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("7e548879-2dcc-87f7-808f-018e9ff1ad21"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("8523a619-0f1e-8137-8090-018e9ff1ad21"),
                            Name = "Short story"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OperatorId");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Operators", (string)null);
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PublisherId");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Publishers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f61cd634-0e73-8c8e-807b-018e9ff1ad21"),
                            AccountId = new Guid("806b46a3-8885-8504-8506-018e9ff1ac7c"),
                            Name = "Gyldendal"
                        },
                        new
                        {
                            Id = new Guid("359b1d72-4725-8314-807c-018e9ff1ad21"),
                            AccountId = new Guid("f12a8721-fa3e-8ed4-8507-018e9ff1ac7c"),
                            Name = "Forlaget Als"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("610ee7e5-edcb-894e-8093-018e9ff1ad21"),
                            AccountId = new Guid("5b601ae1-9562-8703-8505-018e9ff1ac7c"),
                            Birthday = new DateOnly(1993, 4, 12),
                            Name = "Thomas",
                            Surname = "Berlin"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.UserBook", b =>
                {
                    b.Property<Guid>("UserBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcquireDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ProgressInProcent")
                        .HasColumnType("real");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserBookId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks", (string)null);
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastSignIn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b601ae1-9562-8703-8505-018e9ff1ac7c"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("57642934-1ddc-8bdf-8501-018e9ff1ac7c"),
                            ConcurrencyStamp = "UserSeedConcurrencyStamp",
                            Email = "User@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 2, 17, 53, 19, 484, DateTimeKind.Utc).AddTicks(5911),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@TEST.COM",
                            NormalizedUserName = "USER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEESD+yaT2P/re408aSa0YUXzgUVtPMwYIiwVqOpHd5dBH/c4wlf7jhe09tn4mzFgNw==",
                            PhoneNumber = "4587654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "UserSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "User@Test.com"
                        },
                        new
                        {
                            Id = new Guid("806b46a3-8885-8504-8506-018e9ff1ac7c"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("7eac98d8-581b-8c57-8502-018e9ff1ac7c"),
                            ConcurrencyStamp = "PublisherSeedConcurrencyStamp",
                            Email = "Publisher@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 2, 17, 53, 19, 484, DateTimeKind.Utc).AddTicks(5964),
                            LockoutEnabled = false,
                            NormalizedEmail = "PUBLISHER@TEST.COM",
                            NormalizedUserName = "PUBLISHER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKC74TSJUR+TPzpckRHy0bQQtBu4ElSDI9/kwaMrQvzjwvm4YiKUARstCyCYxHhmEA==",
                            PhoneNumber = "4576543210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PublisherSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Publisher@Test.com"
                        },
                        new
                        {
                            Id = new Guid("f12a8721-fa3e-8ed4-8507-018e9ff1ac7c"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("7eac98d8-581b-8c57-8502-018e9ff1ac7c"),
                            ConcurrencyStamp = "Publisher2SeedConcurrencyStamp",
                            Email = "Publisher2@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 2, 17, 53, 19, 484, DateTimeKind.Utc).AddTicks(5975),
                            LockoutEnabled = false,
                            NormalizedEmail = "PUBLISHER2@TEST.COM",
                            NormalizedUserName = "PUBLISHER2@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP89obEc0wZ0tujy24iQ2oEmOp1GwI1PIZfijyb8Zdd+avsZ+A9ZCGQ9yxp8f/wtGw==",
                            PhoneNumber = "4565432109",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "Publisher2SeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Publisher2@Test.com"
                        },
                        new
                        {
                            Id = new Guid("3f8a2ba3-d1a3-8da5-8508-018e9ff1ac7c"),
                            AccessFailedCount = 0,
                            AccountTypeId = new Guid("c2cd6e19-e622-87e8-8503-018e9ff1ac7c"),
                            ConcurrencyStamp = "OperatorSeedConcurrencyStamp",
                            Email = "Operator@Test.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(2024, 4, 2, 17, 53, 19, 484, DateTimeKind.Utc).AddTicks(5985),
                            LockoutEnabled = false,
                            NormalizedEmail = "OPERATOR@TEST.COM",
                            NormalizedUserName = "OPERATOR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELE3Ve/69B2S7QrOIlbUt8MmLAJsPfoel+iDKKsGxOcdBikAo26f/C0DMU47HrK2ng==",
                            PhoneNumber = "4554321098",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "OperatorSeedSecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "Operator@Test.com"
                        });
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.AccountRefreshToken", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId", "Value");

                    b.ToTable("AccountRefreshTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.BookGenre", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Operator", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.Operator", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.Publisher", "AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithOne()
                        .HasForeignKey("PubHub.API.Domain.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.UserBook", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.AccessType", "AccessType")
                        .WithMany()
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PubHub.API.Domain.Entities.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccessType");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.HasOne("PubHub.API.Domain.Entities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.AccountRefreshToken", b =>
                {
                    b.HasOne("PubHub.API.Domain.Identity.Account", "Account")
                        .WithMany("AccountRefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PubHub.API.Domain.Entities.User", b =>
                {
                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("PubHub.API.Domain.Identity.Account", b =>
                {
                    b.Navigation("AccountRefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
